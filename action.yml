name: 'GitOps'
description: 'This GitHub Action can be used for our GitOps workflow. The GitHub Action will build and push the Docker image for your service and deploys the new version at our Kubernetes clusters.'
inputs:
  dockerenabled:
    description: 'Build and push the Docker Image'
    required: true
    default: 'true'
  dockerregistry:
    description: 'Docker Registry'
    required: true
    default: 'registry.staffbase.com'
  dockerimage:
    description: 'Docker Image'
    required: true
  dockerusername:
    description: 'Username for the Docker Registry'
    required: true
  dockerpassword:
    description: 'Password for the Docker Registry'
    required: true
  dockerfile:
    description: 'Dockerfile'
    required: true
    default: './Dockerfile'
  dockeradditionalbuildparams:
    description: 'List of Docker Build Parameters like: "--target runtime --build-arg ARG1=one --build-arg ARG2=two"'
    required: false
  gitopsenabled:
    description: 'Update manifest files in the GitOps repository'
    required: true
    default: 'true'
  gitopsorganization:
    description: 'GitHub Organization for GitOps'
    required: true
    default: 'Staffbase'
  gitopsrepository:
    description: 'GitHub Repository for GitOps'
    required: true
    default: 'mops'
  gitopsuser:
    description: 'GitHub User for GitOps'
    required: true
    default: 'Staffbot'
  gitopsemail:
    description: 'GitHub User for GitOps'
    required: true
    default: 'daniel.grosse+staffbot@staffbase.com'
  gitopstoken:
    description: 'GitHub Token for GitOps'
    required: true
  gitopsdev:
    description: 'Files which should be updated by the GitHub Action for DEV'
    required: true
  gitopsstage:
    description: 'Files which should be updated by the GitHub Action for STAGE'
    required: true
  gitopsprod:
    description: 'Files which should be updated by the GitHub Action for PROD'
    required: true
  workingdirectory:
    description: 'The directory (as a path relative to the repo root dir) in which the GitOps action should be executed. The dockerfile variable should be relative to workingdirectory.'
    required: false
    default: '.'
runs:
  using: "composite"
  steps:
    - name: Generate Tags
      id: preparation
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/heads/master ]] || [[ $GITHUB_REF == refs/heads/main ]]; then
          TAG="master-${GITHUB_SHA::8}"
          LATEST="master"
          PUSH="true"
        elif [[ $GITHUB_REF == refs/heads/dev ]]; then
          TAG="dev-${GITHUB_SHA::8}"
          LATEST="dev"
          PUSH="true"
        elif [[ $GITHUB_REF == refs/tags/v* ]]; then
          TAG="${GITHUB_REF:11}"
          LATEST="latest"
          PUSH="true"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG="${GITHUB_REF:10}"
          LATEST="latest"
          PUSH="true"
        else
          TAG="${GITHUB_SHA::8}"
          PUSH="false"
        fi

        echo ::set-output name=tag::${TAG}
        echo ::set-output name=latest::${LATEST}
        echo ::set-output name=push::${PUSH}

    - name: Build and Push the Docker Image
      shell: bash
      working-directory: ${{ inputs.workingdirectory }}
      run: |
        if [[ ${{ inputs.dockerenabled }} == "true" ]]; then
          echo The working directory is $(pwd)
          echo '${{ inputs.dockerpassword }}' | docker login ${{ inputs.dockerregistry }} -u '${{ inputs.dockerusername }}' --password-stdin

          docker build ${{ inputs.dockeradditionalbuildparams }} -f ${{ inputs.dockerfile }} -t ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }} .

          if [[ ! -z "${{ steps.preparation.outputs.latest }}" ]]; then
            docker tag ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }} ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.latest }}
          fi

          if [[ ${{ steps.preparation.outputs.push }} == "true" ]]; then
            docker push --all-tags ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}
          fi
        fi

    - name: Update Docker Image in Repository
      shell: bash
      run: |
        if [[ ${{ inputs.gitopsenabled }} == "true" ]]; then
          git config --global user.email "${{ inputs.gitopsemail }}" && git config --global user.name "${{ inputs.gitopsuser }}"

          git clone https://${{ inputs.gitopsuser }}:${{ inputs.gitopstoken }}@github.com/${{ inputs.gitopsorganization }}/${{ inputs.gitopsrepository }}.git .github/${{ inputs.gitopsrepository }}
          cd .github/${{ inputs.gitopsrepository }}
          echo "Repository ${{ inputs.gitopsorganization }}/${{ inputs.gitopsrepository }} was cloned successfully "

          if [[ $GITHUB_REF == refs/heads/master ]] || [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "Run update for STAGE"
            while IFS= read -r line; do
              echo "Check if path $line exists and get old current version"
              ../gitops/yq r -e $line
              echo "Run update $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}"
              ../gitops/yq w -i $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}
            done <<< "${{ inputs.gitopsstage }}"
          elif [[ $GITHUB_REF == refs/heads/dev ]]; then
            echo "Run update for DEV"
            while IFS= read -r line; do
              echo "Check if path $line exists and get old current version"
              ../gitops/yq r -e $line
              echo "Run update $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}"
              ../gitops/yq w -i $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}
            done <<< "${{ inputs.gitopsdev }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "Run update for PROD"
            while IFS= read -r line; do
              echo "Check if path $line exists and get old current version"
              ../gitops/yq r -e $line
              echo "Run update $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}"
              ../gitops/yq w -i $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}
            done <<< "${{ inputs.gitopsprod }}"
          else
            echo "Simulate update for DEV"
            while IFS= read -r line; do
              echo "Check if path $line exists and get old current version"
              ../gitops/yq r -e $line
              echo "Run update $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}"
              ../gitops/yq w -i $line ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}
            done <<< "${{ inputs.gitopsdev }}"
          fi

          if [[ ${{ steps.preparation.outputs.push }} == "true" ]]; then
            git add . && git commit -m "Release ${{ inputs.dockerregistry }}/${{ inputs.dockerimage }}:${{ steps.preparation.outputs.tag }}"
            git pull --rebase https://${{ inputs.gitopsuser }}:${{ inputs.gitopstoken }}@github.com/${{ inputs.gitopsorganization }}/${{ inputs.gitopsrepository }}.git # in case there was another push in the meantime
            git push https://${{ inputs.gitopsuser }}:${{ inputs.gitopstoken }}@github.com/${{ inputs.gitopsorganization }}/${{ inputs.gitopsrepository }}.git
          fi
        fi
