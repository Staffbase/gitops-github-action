name: 'Docker and GitOps Commit'
description: 'Build and push the Docker image and commits the new version to your GitOps repo.'
author: 'Staffbase GmbH'

inputs:
  docker-registry:
    description: 'Docker Registry'
    required: true
    default: 'registry.staffbase.com'
  docker-image:
    description: 'Docker Image'
    required: true
  docker-username:
    description: 'Username for the Docker Registry'
    required: false
  docker-password:
    description: 'Password for the Docker Registry'
    required: false
  docker-file:
    description: 'Path of the Dockerfile. Should be relative to input.working-directory'
    required: true
    default: './Dockerfile'
  docker-build-args:
    description: "List of build-time variables"
    required: false
  docker-build-target:
    description: "Sets the target stage to build"
    required: false
  gitops-organization:
    description: 'GitHub Organization for GitOps'
    required: true
    default: 'Staffbase'
  gitops-repository:
    description: 'GitHub Repository for GitOps'
    required: true
    default: 'mops'
  gitops-user:
    description: 'GitHub User for GitOps'
    required: true
    default: 'Staffbot'
  gitops-email:
    description: 'GitHub User for GitOps'
    required: true
    default: 'staffbot@staffbase.com'
  gitops-token:
    description: 'GitHub Token for GitOps'
    required: false
  gitops-dev:
    description: 'Files which should be updated by the GitHub Action for DEV'
    required: false
  gitops-stage:
    description: 'Files which should be updated by the GitHub Action for STAGE'
    required: false
  gitops-prod:
    description: 'Files which should be updated by the GitHub Action for PROD'
    required: false
  jfrog-config:
    description: 'The configuration for JFrog'
    required: false
  working-directory:
    description: 'The path relative to the repo root dir in which the GitOps action should be executed.'
    required: false
    default: '.'

outputs:
  docker-tag:
    description: 'Docker tag'
    value: ${{ steps.preparation.outputs.tag }}

runs:
  using: "composite"
  steps:
    - name: Generate Tags
      id: preparation
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/heads/master ]]; then
          TAG="master-${GITHUB_SHA::8}"
          LATEST="master"
          PUSH="true"
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          TAG="main-${GITHUB_SHA::8}"
          LATEST="main"
          PUSH="true"
        elif [[ $GITHUB_REF == refs/heads/dev ]]; then
          TAG="dev-${GITHUB_SHA::8}"
          LATEST="dev"
          PUSH="true"
        elif [[ $GITHUB_REF == refs/tags/v* ]]; then
          TAG="${GITHUB_REF:11}"
          LATEST="latest"
          PUSH="true"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG="${GITHUB_REF:10}"
          LATEST="latest"
          PUSH="true"
        else
          TAG="${GITHUB_SHA::8}"
          PUSH="false"
        fi

        TAG_LIST="${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${TAG}"
        if [[ ! -z "${LATEST}" ]]; then
          TAG_LIST+=",${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${LATEST}"
        fi

        echo ::set-output name=tag_list::${TAG_LIST}
        echo ::set-output name=tag::${TAG}
        echo ::set-output name=latest::${LATEST}
        echo ::set-output name=push::${PUSH}

    - name: Set up Docker Buildx
      if: inputs.docker-username != '' && inputs.docker-password != ''
      uses: docker/setup-buildx-action@v2

    - name: Login to Registry
      if: inputs.docker-username != '' && inputs.docker-password != ''
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.docker-registry }}
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    # - name: Build
    #   id: docker_build
    #   if: inputs.docker-username != '' && inputs.docker-password != ''
    #   uses: docker/build-push-action@v3
    #   with:
    #     context: ${{ inputs.working-directory }}
    #     # push: ${{ steps.preparation.outputs.push }}
    #     file: ${{ inputs.working-directory }}/${{ inputs.docker-file }}
    #     target: ${{ inputs.docker-build-target }}
    #     build-args: ${{ inputs.docker-build-args }}
    #     tags: ${{ steps.preparation.outputs.tag_list }}
    #     platforms: linux/amd64
    #     cache-from: type=gha
    #     cache-to: type=gha,mode=max
    #     load: true

    - name: Build
      id: docker_push
      if: inputs.docker-username != '' && inputs.docker-password != ''
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.working-directory }}
        push: ${{ steps.preparation.outputs.push }}
        file: ${{ inputs.working-directory }}/${{ inputs.docker-file }}
        target: ${{ inputs.docker-build-target }}
        build-args: ${{ inputs.docker-build-args }}
        tags: ${{ steps.preparation.outputs.tag_list }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Setup JFrog Cli
      if: inputs.jfrog-config != ''
      uses: jfrog/setup-jfrog-cli@v2
      env:
        JF_ENV_1: ${{ inputs.jfrog-config }}

    - name: Scan Docker Image
      if: inputs.jfrog-config != ''
      shell: bash
      run: |
        echo '${{ inputs.docker-password }}' | docker login ${{ inputs.docker-registry }} -u '${{ inputs.docker-username }}' --password-stdin
        docker pull ${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}
        jf docker scan ${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}
        docker logout

    - name: Checkout GitOps Repository
      if: inputs.gitops-token != ''
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.gitops-organization }}/${{ inputs.gitops-repository }}
        token: ${{ inputs.gitops-token }}
        path: .github/${{ inputs.gitops-repository }}

    - name: Update Docker Image in Repository
      if: inputs.gitops-token != ''
      working-directory: .github/${{ inputs.gitops-repository }}
      shell: bash
      run: |
        commit_changes () {
          if [[ ${{ steps.preparation.outputs.push }} == "true" ]]; then
            git add .

            # commit with no errors if there are no changes
            if git diff-index --quiet HEAD; then
              echo "There were no changes..."
              return
            fi

            git commit -m "Release ${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}"
            # In case there was another push in the meantime, we pull it again
            git pull --rebase https://${{ inputs.gitops-user }}:${{ inputs.gitops-token }}@github.com/${{ inputs.gitops-organization }}/${{ inputs.gitops-repository }}.git
            git push https://${{ inputs.gitops-user }}:${{ inputs.gitops-token }}@github.com/${{ inputs.gitops-organization }}/${{ inputs.gitops-repository }}.git
          fi
        }

        # configure git user
        git config --global user.email "${{ inputs.gitops-email }}" && git config --global user.name "${{ inputs.gitops-user }}"

        if [[ ( $GITHUB_REF == refs/heads/master || $GITHUB_REF == refs/heads/main ) && -n "${{ inputs.gitops-stage }}" ]]; then
          echo "Run update for STAGE"
          while IFS= read -r line; do
            array=($line)
            echo "Check if path $line exists and get old current version"
            yq -e .${array[1]} ${array[0]}
            echo "Run update $line ${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}"
            yq -i .${array[1]}=\"${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}\" ${array[0]}
          done <<< "${{ inputs.gitops-stage }}"
          commit_changes

        elif [[ $GITHUB_REF == refs/heads/dev && -n "${{ inputs.gitops-dev }}" ]]; then
          echo "Run update for DEV"
          while IFS= read -r line; do
            array=($line)
            echo "Check if path $line exists and get old current version"
            yq -e .${array[1]} ${array[0]}
            echo "Run update $line ${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}"
            yq -i .${array[1]}=\"${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}\" ${array[0]}
          done <<< "${{ inputs.gitops-dev }}"
          commit_changes

        elif [[ $GITHUB_REF == refs/tags/* && -n "${{ inputs.gitops-prod }}" ]]; then
          echo "Run update for PROD"
          while IFS= read -r line; do
            array=($line)
            echo "Check if path $line exists and get old current version"
            yq -e .${array[1]} ${array[0]}
            echo "Run update $line ${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}"
            yq -i .${array[1]}=\"${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}\" ${array[0]}
          done <<< "${{ inputs.gitops-prod }}"
          commit_changes

        elif [[ -n "${{ inputs.gitops-dev }}" ]]; then
          echo "Simulate update for DEV"
          while IFS= read -r line; do
            array=($line)
            echo "Check if path $line exists and get old current version"
            yq -e .${array[1]} ${array[0]}
            echo "Run update $line ${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}"
            yq -i .${array[1]}=\"${{ inputs.docker-registry }}/${{ inputs.docker-image }}:${{ steps.preparation.outputs.tag }}\" ${array[0]}
          done <<< "${{ inputs.gitops-dev }}"
          commit_changes
        fi

branding:
  icon: 'git-merge'
  color: 'blue'
